{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"stream-read-xbrl","text":"<p>This is a fork of https://github.com/uktrade/stream-read-xbrl since that repo has been taken down. I copied the files from an outdated fork (arvandhassan/stream-read-xbrl) of the original repo that was still public. I've then updated the source code of stream_read_xbrl.py based on the files on https://pypi.org/project/stream-read-xbrl. Some packages are out of date causing tests to fail. Needs some work to get these passing again.</p> <p>Python package to parse Companies House accounts data in a streaming way. It converts the zipped XBRL format that Companies House supplies into a single data frame of 38 columns.</p> <p>On a standard laptop with 8 CPU cores it takes approximately 10 seconds to convert a single day of Companies House accounts data. This does not include the time to transfer the data from Companies House.</p> <p>Visit Getting started to get started.</p>"},{"location":"contributing/","title":"How to Contribute","text":"<p>In most cases to contribute you will need a GitHub account.</p>"},{"location":"contributing/#contributing-an-issue","title":"Contributing an Issue","text":"<p>Suspected issues with stream-read-xbrl can be submitted at the stream-read-xbrl Issues page. An issue that contains a minimal, reproducible example stands the best chance of being resolved. However, it is understood that this is not possible in all circumstances.</p>"},{"location":"contributing/#contributing-a-feature-request","title":"Contributing a Feature Request","text":"<p>A feature request can be submitted using the Ideas category in the stream-read-xbrl discussions.</p>"},{"location":"contributing/#contributing-documentation-or-code","title":"Contributing documentation or code","text":"<p>To contribute changes to documentation or code, you will need the source of stream-read-xbrl locally. The instructions for this depend on if you are a member. In both cases, experience of working with source code, working on the command line, and working with git is helpful.</p>"},{"location":"contributing/#if-youre-a-member","title":"If you\u2019re a member","text":"<ol> <li> <p>[Setup an SSH key and associate it with your GitHub account] (https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)</p> </li> <li> <p>Clone the repository</p> <pre><code>git clone git@github.com:mrbrianevans/stream-read-xbrl.git\ncd stream-read-xbrl\n</code></pre> </li> </ol> <p>You should not fork the repository if you're a member.</p>"},{"location":"contributing/#if-youre-not-a-member","title":"If you\u2019re not a member","text":"<p>1.Setup an SSH key and associate it with your GitHub account.</p> <ol> <li> <p>Clone the repository.</p> <pre><code>git clone git@github.com:/stream-read-xbrl.git\ncd stream-read-xbrl\n</code></pre> </li> </ol> <p>3.Fork the repository. Make a note of the \"Owner\" that you fork to. This is usually your username.</p> <p>There is more documentation on forking in GitHub's guide on contributing to projects.</p> <ol> <li> <p>Clone the forked repository. In the following, replace my-username with the owner that you forked to in step 2.</p> <pre><code>git clone git@github.com:my-username/stream-read-xbrl.git\ncd stream-read-xbrl\n</code></pre> </li> </ol>"},{"location":"contributing/#contributing-documentation","title":"Contributing documentation","text":"<p>The source of the documentation is in the docs/ directory of the source code, and is written using Material for mkdocs.</p> <p>Changes are then submitted via a Pull Request (PR). To do this:</p> <ol> <li> <p>Decide on a short hyphen-separated descriptive name for your change, prefixed with docs/ for example docs/add-example.</p> </li> <li> <p>Make a branch using this descriptive name.</p> <pre><code>git checkout -b docs/add-example\ncd stream-read-xbrl\n</code></pre> </li> <li> <p>Make your changes in a text editor.</p> </li> <li> <p>Preview your changes locally.</p> <pre><code>pip install -r requirements-docs.txt  # Only needed once\nmkdocs serve\n</code></pre> </li> <li> <p>Commit your change and push to your fork. Ideally the commit message will follow the Conventional Commit specification.</p> <pre><code>git add docs/getting-started.md  # Repeat for each file changed\ngit commit -m \"docs: add an example\"\ngir push origin docs/add-example\n</code></pre> </li> <li> <p>Raise a PR at https://github.com/mrbrianevans/stream-read-xbrl/pulls against the master branch in stream-unzip.</p> </li> <li> <p>Wait for the PR to be approved and merged, and respond to any questions or suggested changes.</p> </li> </ol> <p>When the PR is merged, the documentation is deployed automatically to https://stream-read-xbrl.docs.trade.gov.uk/.</p>"},{"location":"contributing/#contributing-code","title":"Contributing code","text":"<p>To contribute most code changes:</p> <ul> <li>Knowledge of Python is required. Python iterables, and specifically generators, are used heavily.</li> </ul> <p>Changes are then submitted via a Pull Request (PR). To do this:</p> <ol> <li> <p>Decide on a short hyphen-separated descriptive name for your change, prefixed with the type of change. For example fix/the-bug-description.</p> </li> <li> <p>Make a branch using this descriptive name.</p> <pre><code>git checkout -b fix-a-bug-description\n</code></pre> </li> <li> <p>Make sure you can run existing tests locally</p> <pre><code>pip install -e \".[dev]\"  # Only needed once\npytest\n</code></pre> </li> <li> <p>Make your changes in a text editor. In the cases of changing behaviour, this would usually include changing or adding at least one test in test_stream_read_xbrl.py, and running them.</p> <pre><code>pytest\n</code></pre> </li> <li> <p>Commit your changes and push to your fork. Ideally the commit message will follow the Conventional Commit specification.</p> <pre><code>git add stream_zip.py  # Repeat for each file changed\ngit commit -m \"feat: the bug description\"\ngit push origin fix/the-bug-description\n</code></pre> </li> <li> <p>Raise a PR at https://github.com/mrbrianevans/stream-read-xbrl/pulls(https://github.com/mrbrianevans/stream-read-xbrl/pulls) against the master branch in stream-read-xbrl.</p> </li> <li> <p>Wait for the PR to be approved and merged, and respond to any questions or suggested changes.</p> </li> </ol>"},{"location":"data-dictionary/","title":"Data dictionary","text":"<p>stream-read-xbrl converts Companies House accounts data into a single data frame of 38 columns. The 38 columns can be interpreted as a denormalised data frame of 3 source data frames - \"Run\", \"Companies at date in run\", and \"Periods for company at date in run\".</p> <p>For further details on the extraction of data, please see the How Data Is Extracted page</p>"},{"location":"data-dictionary/#run","title":"Run","text":"run_code <p>str</p> <p>Internal run processes. It is formed from the file name in Companies House, and is prefixed with 'Prod'.</p> zip_url <p>str</p> <p>Populated by stream_read_xbrl_sync and stream_read_xbrl_sync_s3_csv, None otherwise.</p> <p>Original URL of zip. </p>"},{"location":"data-dictionary/#companies-at-date-in-run","title":"Companies at date in run","text":"<p>For each Run, there would be one or more \"Companies at date in a run\".</p> company_id <p>str</p> <p>The unique identifier for the company that filed the account. Use this to join onto the company_number in the companieshouse.companies table.</p> <p>Extracted from the member file name in the zip.</p> date <p>date</p> <p>The date on which the account was filed, drawn from the balance sheet date. This is known as the accounting reference date.</p> <p>Extracted from the member file name in the zip. </p> file_type <p>str</p> <p>The file format that the account document was uploaded in. This is either XML or HTML. </p> <p>Extracted from the member file name in the zip. </p> taxonomy <p>str</p> <p>The account record's taxonomy, which is the specific set of hierarchical XBRL tags designed to help organize and tag documents related to the account.</p> balance_sheet_date <p>date</p> <p>The date that the company's balance sheet was submitted. This shows the value of everything the company owns, owes and is owed on the last day of the financial year.</p> <p>Extracted from BalanceSheetDate XBRL field</p> companies_house_registered_number <p>text</p> <p>The company's registration number, assigned to a company during the incorporation process to identify the company. This is a unique string of 8 characters.</p> <p>Extracted from CompaniesHouseRegisteredNumber or UKCompaniesHouseRegisteredNumber XBRL fields</p> entity_current_legal_name <p>str</p> <p>The official name of the company that filed the account, as it appears on the Companies House register.</p> <p>Extracted from EntityCurrentLegalOrRegisteredName or EntityCurrentLegalName XBRL fields</p> company_dormant <p>bool</p> <p>Indicates whether or not the company is dormant. The company is called dormant by Companies House if it had no 'significant' transactions in the financial year.</p> <p>Extracted from EntityDormantTruefalse or EntityDormant or CompanyDormant or CompanyNotDormant XBRL fields</p> average_number_employees_during_period <p>Decimal</p> <p>The average number of employees employed under a contract of service by the company that filed the account for the financial year.</p> <p>Extracted from AverageNumberEmployeesDuringPeriod or EmployeesTotal or AverageNumberEmployeesDuringPeriod or EmployeesTotal XBRL fields</p>"},{"location":"data-dictionary/#periods-for-company-in-run","title":"Periods for company in run","text":"<p>For each \"Company at a date in a run\" there can be zero or more \"Periods for company in run\". In the case of zero, all the following values are <code>None</code>.</p> <p>A period for a company, defined by <code>company_id</code>, <code>period_start</code> and <code>period_end</code>, may be repeated. This is because they are contained in multiple submissions of accounts data to Companies House.</p> period_start <p>date</p> <p>The date on which the account is made up to. This is also known as the 'accounting reference date'.</p> <p>Extracted from the startDate XBRL field, contained within the period and context tags of the html member file</p> period_end <p>date</p> <p>The account referencing date. This is the same as the period_start field.</p> <p>Extracted from the endDate XBRL field, contained within the period and context tags of the html member file</p> tangible_fixed_assets <p>Decimal</p> <p>The total value of assets that have been acquired for long term use in the company's business, and will be retained for a year or more.</p> <p>Extracted from FixedAssets or TangibleFixedAssets or PropertyPlantEquipment XBRL fields for the period indicated by period_start and period_end</p> debtors <p>Decimal</p> <p>The total amount owed to the company as a result of trading activity, measured in British sterling (\u00a3).</p> <p>Extracted from Debtors XBRL field for the period indicated by period_start and period_end</p> cash_bank_in_hand <p>Decimal</p> <p>The total value (in \u00a3) of any positive bank account balance plus any cash held as at the balance sheet date.</p> <p>Extracted from CashBankInHand or CashBankOnHand XBRL fields for the period indicated by period_start and period_end</p> current_assets <p>Decimal</p> <p>The total value (in \u00a3) of current assets owned by the company. Current assets will convert into cash quicker than fixed assets.</p> <p>Extracted from CurrentAssets XBRL field for the period indicated by period_start and period_end</p> creditors_due_within_one_year <p>Decimal</p> <p>The total value (in \u00a3) of goods, services or payments received by the company which are not yet paid as at the balance sheet date, but due within 1 financial year.</p> <p>Extracted from CreditorsDueWithinOneYear or Creditors (if withinOneYear in contextRef) XBRL fields for the period indicated by period_start and period_end</p> creditors_due_after_one_year <p>Decimal</p> <p>The total value (in \u00a3) of goods, services or payments received by the company which are not yet paid as at the balance sheet date, and due beyond 1 financial year.</p> <p>Extracted from CreditorsDueAfterOneYear XBRL field for the period indicated by period_start and period_end</p> net_current_assets_liabilities <p>Decimal</p> <p>The net worth (in \u00a3) of a company's current liabilities. These are amounts owing that the company expects to settle within 12 months of the balance sheet date.</p> <p>Extracted from NetCurrentAssetsLiabilities XBRL field for the period indicated by period_start and period_end</p> total_assets_less_current_liabilities <p>Decimal</p> <p>The net worth (in \u00a3) of a company's long term liabilities. These are amounts that the company expects to repay more than 12 months after the balance sheet date.</p> <p>Extracted from TotalAssetsLessCurrentLiabilities XBRL field for the period indicated by period_start and period_end</p> net_assets_liabilities_including_pension_asset_liability <p>Decimal</p> <p>The total value (in \u00a3) of fixed and current assets less minus the total value of current and long term liabilities, including the pension asset liability.</p> <p>Extracted from NetAssetsLiabilitiesIncludingPensionAssetLiability or NetAssetsLiabilities XBRL fields for the period indicated by period_start and period_end</p> called_up_share_capital <p>Decimal</p> <p>The total nominal or face value (in \u00a3) of shares that the company has issued to shareholders.</p> <p>Extracted from CalledUpShareCapital XBRL field for the period indicated by period_start and period_end</p> profit_loss_account_reserve <p>Decimal</p> <p>The total value (in \u00a3) of any other reserves not included in the profit and loss account.</p> <p>Extracted from ProfitLossAccountReserve XBRL field for the period indicated by period_start and period_end</p> shareholder_funds <p>Decimal</p> <p>The total value (in \u00a3) of equity in the company which belongs to the company's stakeholders.</p> <p>Extracted from ShareholderFunds XBRL field for the period indicated by period_start and period_end</p> turnover_gross_operating_revenue <p>Decimal</p> <p>The total income (in \u00a3) after subtracting operating expenses and other costs from total revenue.</p> <p>Extracted from TurnoverGrossOperatingRevenue or TurnoverRevenue XBRL fields for the period indicated by period_start and period_end</p> other_operating_income <p>Decimal</p> <p>The total income (in \u00a3) from all other operating activities which are not related to the principal activities of the company, such as gains/losses from disposals.</p> <p>Extracted from OtherOperatingIncome or OtherOperatingIncomeFormat2 XBRL fields for the period indicated by period_start and period_end</p> cost_sales <p>Decimal</p> <p>The total value (in \u00a3) of merchandise sold by the company in the stated period.</p> <p>Extracted from CostSales XBRL field for the period indicated by period_start and period_end</p> gross_profit_loss <p>Decimal</p> <p>The total value (in \u00a3) of the accumulated profits or earnings of the company over its lifetime.</p> <p>Extracted from GrossProfitLoss XBRL field for the period indicated by period_start and period_end</p> administrative_expenses <p>Decimal</p> <p>The total cost (in \u00a3) the company has incurred not directly tied to a specific function, such as rent and insurance.</p> <p>Extracted from AdministrativeExpenses XBRL field for the period indicated by period_start and period_end</p> raw_materials_consumables <p>Decimal</p> <p>The total cost (in \u00a3) of all commodities that are directly attributable to the production of a good or a service.</p> <p>Extracted from RawMaterialsConsumables or RawMaterialsConsumablesUsed XBRL fields for the period indicated by period_start and period_end</p> staff_costs <p>Decimal</p> <p>The total staff costs (in \u00a3) of the company relating to the financial year. This includes wages, salaries, social security costs and pension costs.</p> <p>Extracted from StaffCosts or StaffCostsEmployeeBenefitsExpense XBRL fields for the period indicated by period_start and period_end</p> depreciation_other_amounts_written_off_tangible_intangible_fixed <p>Decimal</p> <p>The total value (in \u00a3) written off by the company to account for the decrease in value of capital assets over time.</p> <p>Extracted from DepreciationOtherAmountsWrittenOffTangibleIntangibleFixedAssets or DepreciationAmortisationImpairmentExpense XBRL fields for the period indicated by period_start and period_end</p> other_operating_charges_format2 <p>Decimal</p> <p>The total cost (in \u00a3) the company has incurred due to other operating income not arising from turnover or the company's principal activities.</p> <p>Extracted from OperatingProfitLoss or OtherOperatingExpensesFormat2 XBRL fields for the period indicated by period_start and period_end</p> operating_profit_loss <p>Decimal</p> <p>The company's total profit (in \u00a3) from business operations before deduction of interest and taxes. This is the gross profit minus operating expenses.</p> <p>Extracted from OtherOperatingChargesFormat2 XBRL field for the period indicated by period_start and period_end</p> profit_loss_on_ordinary_activities_before_tax <p>Decimal</p> <p>The company's total profit (in \u00a3) from both operating and financial activities carried out, before the deduction of taxes.</p> <p>Extracted from ProfitLossOnOrdinaryActivitiesBeforeTax XBRL field for the period indicated by period_start and period_end</p> tax_on_profit_or_loss_on_ordinary_activities <p>Decimal</p> <p>The total tax amount applied (in \u00a3) to a company's total profit from both operating and financial activities.</p> <p>Extracted from TaxOnProfitOrLossOnOrdinaryActivities or TaxTaxCreditOnProfitOrLossOnOrdinaryActivities XBRL fields for the period indicated by period_start and period_end</p> profit_loss_for_period <p>Decimal</p> <p>The total value (in \u00a3) of the accumulated profits or earnings of the company for the stated accounting reference period.</p> <p>Extracted from ProfitLoss or ProfitLossForPeriod XBRL fields for the period indicated by period_start and period_end</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Python 3.7+</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>You can install stream-read-xbrl and its dependencies from PyPI using pip.</p> <pre><code>pip install stream-read-xbrl\n</code></pre> <p>This installs the latest version of stream-read-xbrl, and the latest compatible version of all of its dependencies.</p> <p>If you regularly install stream-read-xbrl, such as during application deployment, to avoid unexpected changes as new versions are released, you can pin to specific versions. Poetry or pip-tools are popular tools that can be used for this.</p>"},{"location":"getting-started/#usage","title":"Usage","text":"<p>The main function supplied is <code>stream_read_xbrl_zip</code>. This takes a single argument:</p> <ol> <li>An iterable that yields the bytes of a ZIP of Companies Accounts data.</li> </ol> <p>It returns a two-tuple context of:</p> <ol> <li>A tuple of column names.</li> <li>An iterable of the rows of the data, where each row it itself a tuple.</li> </ol> <p>A context allows stream-read-xbrl to clean up any resources robustly.</p>"},{"location":"getting-started/#basic-usage","title":"Basic usage","text":"<p>To use <code>stream_read_xbrl_zip</code>, typically an HTTP client is required to fetch the data from Companies House. For example httpx.</p> <pre><code>import httpx\nfrom stream_read_xbrl import stream_read_xbrl_zip\n# A URL taken from http://download.companieshouse.gov.uk/en_accountsdata.html\nurl = 'http://download.companieshouse.gov.uk/Accounts_Bulk_Data-2023-03-02.zip'\nwith \\\n        httpx.stream('GET', url) as r, \\\n        stream_read_xbrl_zip(r.iter_bytes(chunk_size=65536)) as (columns, rows):\nr.raise_for_status()\nfor row in rows:\nprint(row)\n</code></pre>"},{"location":"getting-started/#pandas-dataframe","title":"Pandas DataFrame","text":"<p>The results of <code>stream_read_xbrl_zip</code> can be converted a Pandas DataFrame by passing them to <code>pd.DataFrame</code>.</p> <pre><code>import httpx\nimport pandas as pd\nfrom stream_read_xbrl import stream_read_xbrl_zip\nurl = 'http://download.companieshouse.gov.uk/Accounts_Bulk_Data-2023-03-02.zip'\nwith \\\n        httpx.stream('GET', url) as r, \\\n        stream_read_xbrl_zip(r.iter_bytes(chunk_size=65536)) as (columns, rows):\ndf = pd.DataFrame(rows, columns=columns)\nprint(df)\n</code></pre> <p>Note that this will load the data of the file into memory at once, and so is not really streaming.</p>"},{"location":"getting-started/#regularly-syncing-data-to-a-local-store","title":"Regularly syncing data to a local store","text":"<p>A utility function is supplied that fetches the data from Companies House, <code>stream_read_xbrl_sync</code>. It takes a single optional <code>date</code> argument, and returns data after this date.</p> <pre><code>import datetime\nfrom stream_read_xbrl import stream_read_xbrl_sync\nwith stream_read_xbrl_sync(datetime.date(2022, 12, 31)) as (columns, date_range_and_rows):\nfor ((start_date, end_date), rows) in date_range_and_rows\nfor row in rows:\nprint(row)\n</code></pre> <p>The <code>end_date</code> can be passed to the next call of <code>stream_read_xbrl_sync</code>. The can be passed to the next call of <code>stream_read_xbrl_sync</code> in order skip data before this date. This can be used as part of a regular sync process from Companies House to a local store - hence the name of the function.</p> <p>This function can take many hours, even days. To handle the case of the process being interrupted, once the inner <code>rows</code> iterable has iterated to completion, the <code>final_zip_date</code> can be saved, and used in the next call to <code>stream_read_xbrl_sync</code> to pick up close to where it left off.</p> <p>It is possible that in such a process data will be repeated, especially if <code>stream_read_xbrl_sync</code> is called infrequently. Running the function approximately once a day would minimise the risk of this.</p>"},{"location":"getting-started/#regularly-syncing-data-to-s3","title":"Regularly syncing data to S3","text":"<p>A higher level utility function is provided that saves CSV data to under a prefix in a bucket in S3.</p> <pre><code>import boto3\nfrom stream_read_xbrl import stream_read_xbrl_sync_s3_csv\ns3_client = boto3.client('s3', region_name='eu-west-2')\nbucket_name = 'my-bucket'\nkey_prefix = 'my-folder/'  # Would usually end in a /\nstream_read_xbrl_sync_s3_csv(s3_client, bucket_name, key_prefix)\n</code></pre> <p>This can be called regularly to keep the bucket updated with recent data. Under the hood, <code>stream_read_xbrl_sync</code> is used, and the same caveats apply. Specifically, data may be repeated in the bucket, especially if the function is called infrequently.</p>"},{"location":"how-data-is-extracted/","title":"How data is extracted","text":"<p>Each row of the data frame returned by stream-read-xbrl has data extracted from 3 sources.</p>"},{"location":"how-data-is-extracted/#1-html","title":"1. HTML","text":"<p>When using the <code>stream_read_xbrl_sync</code> or <code>stream_read_xbrl_sync_s3_csv</code> functions, the HTML from 3 Companies House pages are fetched and parsed to find the URLs of all the ZIP files that have the published accounts data. The pages that contain the URLs of the ZIP files are:</p> <ul> <li>https://download.companieshouse.gov.uk/en_accountsdata.html</li> <li>https://download.companieshouse.gov.uk/en_monthlyaccountsdata.html</li> <li>https://download.companieshouse.gov.uk/historicmonthlyaccountsdata.html</li> </ul> <p>Each row of data has the URL of the ZIP file used to populate it as its <code>zip_url</code> column.</p> <p>When using <code>stream_read_xbrl_zip</code> directly, by default the <code>zip_url</code> column is <code>None</code>.</p>"},{"location":"how-data-is-extracted/#2-names-of-the-member-files-inside-each-zip","title":"2. Names of the member files inside each ZIP","text":"<p>Each ZIP file is a container of many member files, and each has its own file name. 4 columns are extracted from each file name:</p> <ul> <li> <p>run_code</p> </li> <li> <p>company_id</p> </li> <li> <p>date</p> </li> <li> <p>file_type</p> </li> </ul>"},{"location":"how-data-is-extracted/#3-html-or-xml-inside-each-member-file","title":"3. HTML or XML inside each member file","text":"<p>The remaining columns are all extracted from the HTML or XML inside each member file.</p> <p>How data is found for each column is a complex process. However in general, data for each column is found by either by tag name, or by name attribute value.</p> <p>What this means is described below using an example column, <code>balance_sheet_date</code>.</p>"},{"location":"how-data-is-extracted/#tag-name","title":"Tag name","text":"<p>The column <code>balance_sheet_date</code> can be extracted from the <code>BalanceSheetDate</code> name attribute. What this means in terms of the source data can be seen in the following example.</p> <pre><code>&lt;any-namespace:any-tag name=\"bus:BalanceSheetDate\"&gt;\n31 May 2022\n&lt;/any-namespace:any-tag&gt;\n</code></pre> <p>In this case, the <code>balance_sheet_date</code> column will have a Python date object corresponding to 31 May 2022.</p>"},{"location":"how-data-is-extracted/#name-attribute-value","title":"Name attribute value","text":"<p>The column <code>balance_sheet_date</code> can alternatively be extracted from <code>BalanceSheetDate</code> tags. For example.</p> <pre><code>&lt;bus:BalanceSheetDate&gt;\n31 May 2022\n&lt;/bus:BalanceSheetDate&gt;\n</code></pre> <p>In this case, the <code>balance_sheet_name</code> column will also be a Python date object corresponding to 31 May 2022.</p>"},{"location":"investigating-data/","title":"Investigating data issues","text":"<p>To help identify the root cause of a data issue, a utiliy function is provided, <code>stream_read_xbrl_debug</code>.</p> <p>To use it, pass it 4 values from the single row of data in question:</p> <ul> <li>zip_url</li> <li>run_code</li> <li>company_id</li> <li>date</li> </ul> <p>The function then:</p> <ul> <li>If necessary, downloads the source ZIP file from Companies House, and stores in a local cache.</li> <li>Finds the maching file of original member XML or HTML file that matches the 4 values.</li> <li>Prints out this original data from which this data was derived.</li> </ul> <p>For example, save the below Python code to a file <code>debug.py</code>.</p> <pre><code>from stream_read_xbrl import stream_read_xbrl_debug\nstream_read_xbrl_debug(\nzip_url='https://download.companieshouse.gov.uk/archive/Accounts_Monthly_Data-February2019.zip',\nrun_code='Prod224_0063',\ncompany_id='00024001',\ndate=datetime.date(2018, 6, 30),\n)\n</code></pre> <p>And run it using <pre><code>python debug.py\n</code></pre></p> <p>This should print the untransformed source data to the console.</p> <p>To save the source data to a file the following command can be used:</p> <pre><code>python debug.py &gt; out.html\n</code></pre> <p>This allows you to use another program to view the source data. For example a web browser can be used to investigate .html files.</p>"}]}